from telegram import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

def add_start_button():
    return ReplyKeyboardMarkup(
        [[KeyboardButton("üîÑ –í –Ω–∞—á–∞–ª–æ"), KeyboardButton("‚ùó –°–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º")]],
        resize_keyboard=True,
    )

def get_main_menu_keyboard():
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é"), KeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å –æ–±–µ–¥")],
            [KeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é"), KeyboardButton("–ú–æ–∏ –∑–∞–∫–∞–∑—ã")],
            [KeyboardButton("üîÑ –í –Ω–∞—á–∞–ª–æ"), KeyboardButton("‚ùó –°–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º")],
        ],
        resize_keyboard=True,
    )

def get_main_menu_keyboard_admin():
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∞ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —Ä–µ–∂–∏–º."""
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é"), KeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å –æ–±–µ–¥")],
            [KeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é"), KeyboardButton("–ú–æ–∏ –∑–∞–∫–∞–∑—ã")],
            [KeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")],
            [KeyboardButton("üîÑ –í –Ω–∞—á–∞–ª–æ"), KeyboardButton("‚ùó –°–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º")],
        ],
        resize_keyboard=True,
    )

def get_day_keyboard():
    rows = [
        [KeyboardButton("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"), KeyboardButton("–í—Ç–æ—Ä–Ω–∏–∫")],
        [KeyboardButton("–°—Ä–µ–¥–∞"), KeyboardButton("–ß–µ—Ç–≤–µ—Ä–≥")],
        [KeyboardButton("–ü—è—Ç–Ω–∏—Ü–∞")],
        [KeyboardButton("üîÑ –í –Ω–∞—á–∞–ª–æ"), KeyboardButton("‚ùó –°–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º")],
    ]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def get_count_keyboard():
    rows = [
        [KeyboardButton("1 –æ–±–µ–¥"), KeyboardButton("2 –æ–±–µ–¥–∞")],
        [KeyboardButton("3 –æ–±–µ–¥–∞"), KeyboardButton("4 –æ–±–µ–¥–∞")],
        [KeyboardButton("–ù–∞–∑–∞–¥")],
        [KeyboardButton("üîÑ –í –Ω–∞—á–∞–ª–æ"), KeyboardButton("‚ùó –°–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º")],
    ]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def get_count_retry_keyboard():
    rows = [
        [KeyboardButton("1 –æ–±–µ–¥"), KeyboardButton("2 –æ–±–µ–¥–∞")],
        [KeyboardButton("3 –æ–±–µ–¥–∞"), KeyboardButton("4 –æ–±–µ–¥–∞")],
        [KeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –¥–µ–Ω—å")],
        [KeyboardButton("–ù–∞–∑–∞–¥")],
        [KeyboardButton("üîÑ –í –Ω–∞—á–∞–ª–æ"), KeyboardButton("‚ùó –°–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º")],
    ]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def get_confirm_keyboard():
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é"), KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å")],
            [KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", request_contact=True)],
            [KeyboardButton("–ù–∞–∑–∞–¥")],
            [KeyboardButton("üîÑ –í –Ω–∞—á–∞–ª–æ"), KeyboardButton("‚ùó –°–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º")],
        ],
        resize_keyboard=True,
    )

def get_contact_keyboard():
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", request_contact=True)],
            [KeyboardButton("üîÑ –í –Ω–∞—á–∞–ª–æ"), KeyboardButton("‚ùó –°–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º")],
        ],
        resize_keyboard=True,
    )

def get_address_keyboard():
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("–ù–∞–∑–∞–¥")],
            [KeyboardButton("üîÑ –í –Ω–∞—á–∞–ª–æ"), KeyboardButton("‚ùó –°–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º")],
        ],
        resize_keyboard=True,
    )

def get_order_prompt_keyboard():
    rows = [
        [KeyboardButton("–î–∞"), KeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏")],
        [KeyboardButton("üîÑ –í –Ω–∞—á–∞–ª–æ"), KeyboardButton("‚ùó –°–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º")],
    ]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def get_after_confirm_keyboard():
    rows = [
        [KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é"), KeyboardButton("–í—ã–±—Ä–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –¥–µ–Ω—å")],
        [KeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é"), KeyboardButton("–ú–æ–∏ –∑–∞–∫–∞–∑—ã")],
        [KeyboardButton("üîÑ –í –Ω–∞—á–∞–ª–æ"), KeyboardButton("‚ùó –°–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º")],
    ]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def get_duplicate_resolution_keyboard():
    rows = [
        [KeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–∫–∞–∑")],
        [KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É")],
        [KeyboardButton("üîÑ –í –Ω–∞—á–∞–ª–æ"), KeyboardButton("‚ùó –°–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º")],
    ]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def get_weekly_duplicate_keyboard():
    rows = [
        [KeyboardButton("–ó–∞–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–∫–∞–∑—ã")],
        [KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º")],
        [KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ")],
        [KeyboardButton("üîÑ –í –Ω–∞—á–∞–ª–æ"), KeyboardButton("‚ùó –°–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º")],
    ]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def get_admin_main_keyboard():
    rows = [
        [KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é"), KeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
        [KeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é")],
        [KeyboardButton("üîÑ –í –Ω–∞—á–∞–ª–æ"), KeyboardButton("‚ùó –°–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º")],
    ]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def get_admin_report_keyboard():
    rows = [
        [KeyboardButton("–ù–µ–¥–µ–ª—è —Ü–µ–ª–∏–∫–æ–º")],
        [KeyboardButton("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"), KeyboardButton("–í—Ç–æ—Ä–Ω–∏–∫")],
        [KeyboardButton("–°—Ä–µ–¥–∞"), KeyboardButton("–ß–µ—Ç–≤–µ—Ä–≥")],
        [KeyboardButton("–ü—è—Ç–Ω–∏—Ü–∞")],
        [KeyboardButton("üîÑ –í –Ω–∞—á–∞–ª–æ")],
    ]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def get_admin_manage_menu_keyboard():
    rows = [
        [KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–¥–µ–ª–∏"), KeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–ª—é–¥–∞ –¥–Ω—è")],
        [KeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ –º–µ–Ω—é"), KeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑—ã –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é")],
        [KeyboardButton("–ù–∞–∑–∞–¥"), KeyboardButton("üîÑ –í –Ω–∞—á–∞–ª–æ")],
    ]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def get_admin_day_select_keyboard(days: list[str]):
    rows = []
    chunk: list[KeyboardButton] = []
    for day in days:
        chunk.append(KeyboardButton(day))
        if len(chunk) == 2:
            rows.append(chunk)
            chunk = []
    if chunk:
        rows.append(chunk)
    rows.append([KeyboardButton("–ù–∞–∑–∞–¥"), KeyboardButton("üîÑ –í –Ω–∞—á–∞–ª–æ")])
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def get_admin_day_actions_keyboard():
    rows = [
        [KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ"), KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –±–ª—é–¥–æ")],
        [KeyboardButton("–£–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ"), KeyboardButton("–ó–∞–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–ª—é–¥")],
        [KeyboardButton("–ù–∞–∑–∞–¥"), KeyboardButton("üîÑ –í –Ω–∞—á–∞–ª–æ")],
    ]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def get_admin_confirm_keyboard():
    rows = [
        [KeyboardButton("–î–∞"), KeyboardButton("–ù–µ—Ç")],
        [KeyboardButton("–ù–∞–∑–∞–¥"), KeyboardButton("üîÑ –í –Ω–∞—á–∞–ª–æ")],
    ]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def get_admin_back_keyboard():
    rows = [
        [KeyboardButton("–ù–∞–∑–∞–¥"), KeyboardButton("üîÑ –í –Ω–∞—á–∞–ª–æ")],
    ]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)


BULK_COUNTER_BUTTONS = {
    "select_all": "–í—ã–±—Ä–∞—Ç—å –≤—Å—ë",
    "clear_all": "–°–Ω—è—Ç—å –≤—Å—ë",
    "continue": "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
    "cancel": "–û—Ç–º–µ–Ω–∞",
}
BULK_COUNTER_BULLET = "‚Ä¢"


def get_bulk_counter_keyboard(state: dict[str, dict], max_per_day: int | None = None) -> InlineKeyboardMarkup:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–º–∏/–¥–µ–∫—Ä–µ–º–µ–Ω—Ç–∞–º–∏ –ø–æ –¥–Ω—è–º.
    –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ state —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–∏-–¥–Ω–∏ (mon/tue/...) —Å –ø–æ–ª—è–º–∏ label/count/selected.
    """
    rows: list[list[InlineKeyboardButton]] = []
    for day_code in ("mon", "tue", "wed", "thu", "fri"):
        day_info = state.get(day_code)
        if not isinstance(day_info, dict):
            continue
        label = str(day_info.get("label") or "").strip() or day_code
        try:
            count = int(str(day_info.get("count", 0)).split()[0])
        except Exception:
            count = 0
        if count < 0:
            count = 0
        day_text = label
        if count > 0:
            day_text = f"{label} {BULK_COUNTER_BULLET} {count}"
        minus_cb = f"bulk:dec:{day_code}"
        plus_cb = f"bulk:inc:{day_code}"
        toggle_cb = f"bulk:toggle:{day_code}"
        rows.append([
            InlineKeyboardButton(text=day_text, callback_data=toggle_cb),
            InlineKeyboardButton(text="-", callback_data=minus_cb),
            InlineKeyboardButton(text=str(count), callback_data=toggle_cb),
            InlineKeyboardButton(text="+", callback_data=plus_cb),
        ])

    if not rows:
        rows.append([
            InlineKeyboardButton("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–Ω–µ–π", callback_data="bulk:cancel:*"),
        ])
        return InlineKeyboardMarkup(rows)

    rows.append([
        InlineKeyboardButton(
            BULK_COUNTER_BUTTONS["select_all"],
            callback_data="bulk:all:*",
        ),
        InlineKeyboardButton(
            BULK_COUNTER_BUTTONS["clear_all"],
            callback_data="bulk:none:*",
        ),
    ])
    rows.append([
        InlineKeyboardButton(
            BULK_COUNTER_BUTTONS["continue"],
            callback_data="bulk:next:*",
        ),
        InlineKeyboardButton(
            BULK_COUNTER_BUTTONS["cancel"],
            callback_data="bulk:cancel:*",
        ),
    ])
    return InlineKeyboardMarkup(rows)
