# –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª Telegram-–±–æ—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ –æ–±–µ–¥–æ–≤
# –î–ª—è —Ä–∞–±–æ—Ç—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–ø–æ–ª–Ω–∏—Ç—å BOT_TOKEN –∏ ADMIN_ID


from config_secret import BOT_TOKEN, ADMIN_ID

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∏–∑ config_secret)
try:
    from config_secret import OPERATOR_HANDLE, OPERATOR_PHONE
except Exception:
    OPERATOR_HANDLE = "@vitperson"
    OPERATOR_PHONE = "+995 000 000 000"

import logging
import json
import re
import secrets
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters, ConversationHandler, PicklePersistence
from keyboards import (
    add_start_button,
    get_main_menu_keyboard,
    get_day_keyboard,
    get_count_keyboard,
    get_count_retry_keyboard,
    get_confirm_keyboard,
    get_contact_keyboard,
    get_address_keyboard,
)

from telegram.constants import ParseMode
from logging.handlers import TimedRotatingFileHandler
import time
import os
import html

USERS_FILE = "users.json"
ORDERS_FILE = "orders.json"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
MENU, ORDER_DAY, ORDER_COUNT, ADDRESS, CONFIRM = range(5)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å TimedRotatingFileHandler
logger = logging.getLogger()
logger.setLevel(logging.INFO)
log_handler = TimedRotatingFileHandler(
    'bot.log',
    when="midnight",
    interval=1,
    backupCount=30,
    encoding='utf-8'
)
log_handler.suffix = "%Y-%m-%d"
log_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))

# –õ–æ–≥–∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª (—Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è)
console_handler = logging.StreamHandler()
console_handler.setFormatter(logging.Formatter('%(message)s'))
console_handler.setLevel(logging.INFO)

# –ü–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger.handlers.clear()
# –ü–æ–¥–∞–≤–ª—è–µ–º —à—É–º–Ω—ã–µ –ª–æ–≥–∏ httpx (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø—Ä–æ—Å—ã Telegram API)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger.addHandler(log_handler)
logger.addHandler(console_handler)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —è–≤–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å
def log_console(message):
    console_handler.stream.write(message + "\n")
    console_handler.flush()

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω—é

def load_menu():
    try:
        with open("menu.json", "r", encoding="utf-8") as f:
            data = json.load(f)
            # –ø—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º—ã
            if not isinstance(data, dict) or "week" not in data or "menu" not in data or not isinstance(data["menu"], dict):
                logging.error("–ú–µ–Ω—é –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –æ–∂–∏–¥–∞–ª–∏—Å—å –∫–ª—é—á–∏ 'week' –∏ 'menu' (dict)")
                return None
            return data
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é: {e}")
        return None

def log_user_action(user, action):
    username = f"@{user.username}" if user.username else "(–Ω–µ—Ç username)"
    logging.info(f"User {user.id} {username}: {action}")

# –†–∞–±–æ—Ç–∞ —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –ø—Ä–æ—Ñ–∏–ª–µ–π (users.json)

def _load_users() -> dict:
    try:
        if not os.path.exists(USERS_FILE):
            return {}
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            return data if isinstance(data, dict) else {}
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {USERS_FILE}: {e}")
        return {}


def _save_users(data: dict) -> None:
    try:
        tmp = USERS_FILE + ".tmp"
        with open(tmp, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        os.replace(tmp, USERS_FILE)
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å {USERS_FILE}: {e}")


# –†–∞–±–æ—Ç–∞ —Å –∑–∞–∫–∞–∑–∞–º–∏ –∏ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–º ID

def _load_orders() -> dict:
    try:
        if not os.path.exists(ORDERS_FILE):
            return {}
        with open(ORDERS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            return data if isinstance(data, dict) else {}
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {ORDERS_FILE}: {e}")
        return {}


def _save_orders(data: dict) -> None:
    try:
        tmp = ORDERS_FILE + ".tmp"
        with open(tmp, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        os.replace(tmp, ORDERS_FILE)
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å {ORDERS_FILE}: {e}")


def _base36(n: int) -> str:
    chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    if n == 0:
        return "0"
    sign = "-" if n < 0 else ""
    n = abs(n)
    out = []
    while n:
        n, r = divmod(n, 36)
        out.append(chars[r])
    return sign + "".join(reversed(out))


def make_order_id(user_id: int) -> str:
    # –§–æ—Ä–º–∞—Ç: BLB-<ts36>-<uid36>-<rnd>
    ts36 = _base36(int(time.time()))
    uid36 = _base36(abs(int(user_id)))[-4:].rjust(4, "0")
    rnd = _base36(secrets.randbits(20)).rjust(4, "0")[:4]
    return f"BLB-{ts36}-{uid36}-{rnd}"


def save_order(order_id: str, payload: dict) -> None:
    data = _load_orders()
    data[order_id] = payload
    _save_orders(data)


def get_order(order_id: str) -> dict | None:
    return _load_orders().get(order_id)


def get_user_profile(uid: int) -> dict:
    data = _load_users()
    return data.get(str(uid), {})


def set_user_profile(uid: int, profile: dict) -> None:
    data = _load_users()
    data[str(uid)] = profile
    _save_users(data)

def format_menu(menu_data: dict) -> str:
    lines = [f"–ù–µ–¥–µ–ª—è: {menu_data['week']}"]
    for day, items in menu_data["menu"].items():
        if isinstance(items, list):
            pretty = "\n".join(f" - {i}" for i in items)
        else:
            pretty = f" - {items}"
        lines.append(f"{day}:\n{pretty}")
    return "\n".join(lines)


def format_menu_html(menu_data: dict) -> str:
    week = html.escape(str(menu_data.get('week', '')))
    lines = [f"<b>–ù–µ–¥–µ–ª—è:</b> {week}"]
    for day, items in menu_data.get('menu', {}).items():
        lines.append(f"\n<b>{html.escape(day)}:</b>")
        if isinstance(items, list):
            for it in items:
                lines.append(f"‚Ä¢ {html.escape(str(it))}")
        else:
            lines.append(f"‚Ä¢ {html.escape(str(items))}")
    return "\n".join(lines)


def admin_link(user) -> str:
    name = user.first_name or (user.username and f"@{user.username}") or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    return f"[{name}](tg://user?id={user.id})"

# HTML-safe variant for admin link
def admin_link_html(user) -> str:
    name = user.first_name or (user.username and f"@{user.username}") or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    return f'<a href="tg://user?id={user.id}">{html.escape(name)}</a>'

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    log_user_action(update.message.from_user, "start")
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ user_data
    context.user_data.clear()
    # –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ users.json, –µ—Å–ª–∏ –µ—Å—Ç—å
    saved_profile = get_user_profile(update.effective_user.id)
    if saved_profile:
        context.user_data["profile"] = saved_profile
    caption = (
        "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
        "ü•ó –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫—É –≤–∫—É—Å–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –æ–±–µ–¥–æ–≤.\n"
        "–í –æ–±–µ–¥ –≤—Ö–æ–¥–∏—Ç:\n"
        " - –º—è—Å–Ω–æ–µ –±–ª—é–¥–æ (–∫—É—Ä–∏—Ü–∞ –∏–ª–∏ —Å–≤–∏–Ω–∏–Ω–∞) 110 –≥—Ä;\n"
        " - –≥–∞—Ä–Ω–∏—Ä 300 –≥—Ä;\n"
        " - —Å–∞–ª–∞—Ç—ã 250 –≥—Ä.\n"
        "–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –Ω–æ–≤–æ–µ –º–µ–Ω—é.\n"
        "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –≤ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö –ø–æ—Ä—Ü–∏–æ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö.\n"
        "ü´∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å: 15 –ª–∞—Ä–∏</b>\n\n"
        "–ó–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏/–∑–∞–∫–∞–∑–∞–º–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: "
        "<a href=\"tel:+995599526391\">+995599526391</a>\n"
        "Telegram: <a href=\"https://t.me/obedy_dostavka\">@obedy_dostavka</a>\n\n"
        "–° –ø–æ–º–æ—â—å—é –±–æ—Ç–∞ –í—ã –º–æ–∂–µ—Ç–µ:\n‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é\n‚Ä¢ –°—Ä–∞–∑—É –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:"
    )
    log_console("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")
    try:
        with open("Logo.png", "rb") as logo:
            await update.message.reply_photo(
                photo=logo,
                caption=caption,
                parse_mode=ParseMode.HTML,
                reply_markup=get_main_menu_keyboard(),
            )
    except FileNotFoundError:
        await update.message.reply_text(
            caption,
            reply_markup=get_main_menu_keyboard(),
            parse_mode=ParseMode.HTML,
        )
    return MENU


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é"
async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    log_user_action(update.message.from_user, "show_menu")
    menu_data = load_menu()
    if not menu_data:
        await update.message.reply_text("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –º–µ–Ω—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=add_start_button())
        return MENU
    text_html = format_menu_html(menu_data)
    try:
        with open("Menu.jpeg", "rb") as photo:
            await update.message.reply_photo(
                photo=photo,
                reply_markup=add_start_button()
            )
    except FileNotFoundError:
        pass
    await update.message.reply_text(text_html, parse_mode=ParseMode.HTML, reply_markup=add_start_button())
    keyboard = [
        [KeyboardButton("–î–∞"), KeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏")],
        [KeyboardButton("üîÑ Restart bot"), KeyboardButton("‚ùó –°–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º")]
    ]
    await update.message.reply_text(
        "<b>–ó–∞–∫–∞–∑–∞—Ç—å –æ–±–µ–¥ —Å–µ–π—á–∞—Å?</b>", parse_mode=ParseMode.HTML, reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return ORDER_DAY

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫–∞–∑–∞—Ç—å –æ–±–µ–¥" –∏–ª–∏ "–î–∞"
async def order_lunch(update: Update, context: ContextTypes.DEFAULT_TYPE):
    log_user_action(update.message.from_user, "order_lunch")
    await update.message.reply_text("<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:</b>", parse_mode=ParseMode.HTML, reply_markup=get_day_keyboard())
    return ORDER_DAY
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
async def select_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    log_user_action(update.message.from_user, f"select_day: {update.message.text}")
    day = update.message.text
    menu_data = load_menu()
    if not menu_data or day not in menu_data['menu']:
        await update.message.reply_text("<b>–û—à–∏–±–∫–∞:</b> –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏–∑ —Å–ø–∏—Å–∫–∞.", parse_mode=ParseMode.HTML, reply_markup=get_day_keyboard())
        return ORDER_DAY
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –≤ context.user_data
    context.user_data['selected_day'] = day
    await update.message.reply_text("<b>–°–∫–æ–ª—å–∫–æ –æ–±–µ–¥–æ–≤ –∑–∞–∫–∞–∑–∞—Ç—å?</b>", parse_mode=ParseMode.HTML, reply_markup=get_count_keyboard())
    return ORDER_COUNT

async def select_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    log_user_action(update.message.from_user, f"select_count: {update.message.text}")
    count_text = update.message.text
    valid_counts = ["1 –æ–±–µ–¥", "2 –æ–±–µ–¥–∞", "3 –æ–±–µ–¥–∞", "4 –æ–±–µ–¥–∞"]
    if count_text not in valid_counts:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>–∫–Ω–æ–ø–∫–∏</b> –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.",
            parse_mode=ParseMode.HTML,
            reply_markup=get_count_retry_keyboard(),
        )
        return ORDER_COUNT

    # –∞–Ω—Ç–∏-—Å–ø–∞–º: –Ω–µ —á–∞—â–µ 1 –∑–∞–∫–∞–∑–∞ —Ä–∞–∑ –≤ 10 —Å–µ–∫—É–Ω–¥
    now = time.time()
    last_ts = context.user_data.get("last_order_ts")
    if last_ts and now - last_ts < 10:
        await update.message.reply_text(
            "<b>–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ.</b> –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å.",
            parse_mode=ParseMode.HTML,
            reply_markup=get_count_retry_keyboard(),
        )
        return ORDER_COUNT

    count = count_text.split()[0]
    day = context.user_data.get('selected_day', '(–Ω–µ –≤—ã–±—Ä–∞–Ω)')
    menu_data = load_menu()
    menu_for_day = menu_data['menu'].get(day, '') if menu_data else ''
    if isinstance(menu_for_day, list):
        menu_for_day_text = ", ".join(menu_for_day)
    else:
        menu_for_day_text = str(menu_for_day)

    context.user_data['selected_count'] = count
    context.user_data['menu_for_day'] = menu_for_day_text

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    profile = context.user_data.get('profile')
    if not profile:
        profile = get_user_profile(update.effective_user.id)
        if profile:
            context.user_data['profile'] = profile
    has_address = bool((profile or {}).get('address'))

    if has_address:
        # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
        context.user_data['pending_order'] = {
            'day': day,
            'count': count,
            'menu': menu_for_day_text,
        }
        addr = profile.get('address')
        phone_line = profile.get('phone') or "–≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–µ–Ω—é –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ (HTML + —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)
        menu_lines_html = "\n".join(
            f" - {html.escape(it.strip())}" for it in str(menu_for_day_text).split(',') if it.strip()
        )
        confirm_text = (
            f"<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑</b>\n\n"
            f"<b>–î–µ–Ω—å:</b> {html.escape(day)}\n"
            f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {html.escape(str(count))}\n"
            f"<b>–ú–µ–Ω—é:</b>\n{menu_lines_html}\n\n"
            f"<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b>\n{html.escape(addr or '')}\n"
            f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {html.escape(phone_line)}\n\n"
            f"–í—Å–µ –≤–µ—Ä–Ω–æ?"
        )
        await update.message.reply_text(
            confirm_text,
            parse_mode=ParseMode.HTML,
            reply_markup=get_confirm_keyboard(),
        )
        return CONFIRM

    # –∏–Ω–∞—á–µ –ø—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–º
    reply_text = (
        f"<b>–ó–∞–∫–∞–∑ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤</b>!\n\n"
        f"–í {html.escape(day)} –¥–æ—Å—Ç–∞–≤–∏–º <b>{html.escape(str(count))}</b> {html.escape(menu_for_day_text)}.\n\n"
        f"<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>—Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</b> –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º: —É–ª–∏—Ü–∞, –¥–æ–º, –ø–æ–¥—ä–µ–∑–¥/—ç—Ç–∞–∂/–∫–≤–∞—Ä—Ç–∏—Ä–∞, –æ—Ä–∏–µ–Ω—Ç–∏—Ä –¥–ª—è –∫—É—Ä—å–µ—Ä–∞.\n"
        f"–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑."
    )
    await update.message.reply_text(reply_text, parse_mode=ParseMode.HTML, reply_markup=get_address_keyboard())
    return ADDRESS


#
# –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–∏—Ñ–∫–∏-"—Å—Ç–∏–∫–µ—Ä–∞" —É—Å–ø–µ—Ö–∞
async def send_success_gif(update: Update):
    try:
        with open("cat-driving.mp4", "rb") as anim:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–∏–º–∞—Ü–∏—é (mp4 –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∫–∞–∫ –∞–Ω–∏–º–∞—Ü–∏—è –≤ Telegram)
            await update.message.reply_animation(animation=anim)
    except FileNotFoundError:
        logging.warning("–§–∞–π–ª cat-driving.mp4 –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é.")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é: {e}")

# –í—ã–±–æ—Ä –ø—Ä–µ–¥–ª–æ–≥–∞ –ø–µ—Ä–µ–¥ –¥–Ω–µ–º –Ω–µ–¥–µ–ª–∏
def _prep_for_day(day: str) -> str:
    d = (day or "").strip().lower()
    return "–≤–æ" if d.startswith("–≤—Ç–æ—Ä–Ω–∏–∫") else "–≤"

# --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ---
async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text.strip().lower()
    profile = context.user_data.get('profile') or {}

    if choice == '–∏–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å':
        await update.message.reply_text(
            "<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</b>\n\n"
            "–£–∫–∞–∂–∏—Ç–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:\n"
            " ‚Ä¢ —É–ª–∏—Ü—É –∏ –¥–æ–º\n"
            " ‚Ä¢ –ø–æ–¥—ä–µ–∑–¥/—ç—Ç–∞–∂/–∫–≤–∞—Ä—Ç–∏—Ä—É (–µ—Å–ª–∏ –µ—Å—Ç—å)\n"
            " ‚Ä¢ –æ—Ä–∏–µ–Ω—Ç–∏—Ä –¥–ª—è –∫—É—Ä—å–µ—Ä–∞",
            parse_mode=ParseMode.HTML,
            reply_markup=get_address_keyboard(),
        )
        return ADDRESS

    if choice != '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é':
        # –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–π –≤–≤–æ–¥ - –ø–æ–≤—Ç–æ—Ä–∏–º –≤–æ–ø—Ä–æ—Å
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ: <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é</b> –∏–ª–∏ <b>–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å</b>.", parse_mode=ParseMode.HTML, reply_markup=get_confirm_keyboard()
        )
        return CONFIRM

    # '–î–∞' - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –∞–¥–º–∏–Ω—É
    pend = context.user_data.get('pending_order') or {}
    day = pend.get('day', context.user_data.get('selected_day', '(–Ω–µ –≤—ã–±—Ä–∞–Ω)'))
    count = pend.get('count', context.user_data.get('selected_count', '(–Ω–µ –≤—ã–±—Ä–∞–Ω–æ)'))
    menu_for_day = pend.get('menu', context.user_data.get('menu_for_day', ''))

    try:
        count_int = int(str(count))
    except Exception:
        count_int = 1
    cost_lari = count_int * 15
    prep = _prep_for_day(day)

    user = update.message.from_user
    username = f"@{user.username}" if user.username else "(–Ω–µ—Ç username)"
    order_id = make_order_id(user.id)

    created_at = int(time.time())
    save_order(order_id, {
        "user_id": user.id,
        "username": user.username,
        "day": day,
        "count": count,
        "menu": menu_for_day,
        "address": profile.get('address'),
        "phone": profile.get('phone'),
        "status": "new",
        "created_at": created_at,
    })

    admin_text = (
        f"<b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n"
        f"ID –∑–∞–∫–∞–∑–∞: {html.escape(order_id)}\n"
        f"–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {html.escape(day)}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–µ–¥–æ–≤: {html.escape(str(count))}\n"
        f"–ú–µ–Ω—é: {html.escape(menu_for_day)}\n"
        f"–ö–ª–∏–µ–Ω—Ç: {admin_link_html(user)} ({html.escape(username)})\n"
        f"–ê–¥—Ä–µ—Å: {html.escape(profile.get('address') or '')}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {html.escape(profile.get('phone') or '–Ω–µ —É–∫–∞–∑–∞–Ω')}"
    )
    log_console(f"–ó–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
    try:
        await context.bot.send_message(chat_id=ADMIN_ID, text=admin_text, parse_mode=ParseMode.HTML)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")

    # –ì–∏—Ñ–∫–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏
    await send_success_gif(update)

    context.user_data['last_order_ts'] = time.time()
    context.user_data.pop('pending_order', None)

    keyboard = ReplyKeyboardMarkup(
        [
            [KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é")],
            [KeyboardButton("–í—ã–±—Ä–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –¥–µ–Ω—å")],
            [KeyboardButton("üîÑ Restart bot"), KeyboardButton("‚ùó –°–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º")]
        ],
        resize_keyboard=True,
    )
    await update.message.reply_text(
        f"–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç.\n"
        f"ID –∑–∞–∫–∞–∑–∞: {order_id}. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ.\n"
        f"–î–µ–Ω—å –¥–æ—Å—Ç–∞–≤–∫–∏: {day}, —Å 12:30 –¥–æ 15:30.\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ {cost_lari} –ª–∞—Ä–∏.\n"
        f"–û–ø–ª–∞—Ç–∏—Ç—å –º–æ–∂–Ω–æ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä—É –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–º.\n\n"
        f"<b>–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ–∑–∂–µ:</b>\n"
        f"<blockquote>/order {order_id}</blockquote>",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML,
    )
    return MENU



# –ù–∞–∑–∞–¥ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
async def back_to_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "<b>–°–∫–æ–ª—å–∫–æ –æ–±–µ–¥–æ–≤ –∑–∞–∫–∞–∑–∞—Ç—å?</b>",
        parse_mode=ParseMode.HTML,
        reply_markup=get_count_keyboard(),
    )
    return ORDER_COUNT

# –ù–∞–∑–∞–¥ —Å –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è
async def back_to_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:</b>",
        parse_mode=ParseMode.HTML,
        reply_markup=get_day_keyboard(),
    )
    return ORDER_DAY

# –ù–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏: –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω (–ø–æ–∫–∞–∂–µ–º –∫–Ω–æ–ø–∫—É —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–∞)
async def confirm_request_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä –æ–¥–Ω–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º.",
        reply_markup=get_contact_keyboard(),
    )
    return CONFIRM

# –ù–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –∑–∞–Ω–æ–≤–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
async def confirm_save_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.contact:
        return CONFIRM
    phone = update.message.contact.phone_number
    profile = context.user_data.get('profile') or {}
    profile['phone'] = phone
    context.user_data['profile'] = profile
    set_user_profile(update.effective_user.id, profile)

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    pend = context.user_data.get('pending_order') or {}
    day = pend.get('day', context.user_data.get('selected_day', '(–Ω–µ –≤—ã–±—Ä–∞–Ω)'))
    count = pend.get('count', context.user_data.get('selected_count', '(–Ω–µ –≤—ã–±—Ä–∞–Ω–æ)'))
    menu_for_day_text = pend.get('menu', context.user_data.get('menu_for_day', ''))
    addr = profile.get('address', '')
    phone_line = profile.get('phone') or "–≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"
    menu_lines_html = "\n".join(
        f" - {html.escape(it.strip())}" for it in str(menu_for_day_text).split(',') if it.strip()
    )
    confirm_text = (
        f"<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑</b>\n\n"
        f"<b>–î–µ–Ω—å:</b> {html.escape(day)}\n"
        f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {html.escape(str(count))}\n"
        f"<b>–ú–µ–Ω—é:</b>\n{menu_lines_html}\n\n"
        f"<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b>\n{html.escape(addr or '')}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {html.escape(phone_line)}\n\n"
        f"–í—Å–µ –≤–µ—Ä–Ω–æ?"
    )
    await update.message.reply_text(
        confirm_text,
        parse_mode=ParseMode.HTML,
        reply_markup=get_confirm_keyboard(),
    )
    return CONFIRM

async def address_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º PII —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    log_user_action(update.message.from_user, "address/phone step")

    user = update.message.from_user
    profile = context.user_data.get('profile') or {}

    # –ï—Å–ª–∏ –ø—Ä–∏—à–µ–ª –∫–æ–Ω—Ç–∞–∫—Ç - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω, –Ω–æ –±–µ–∑ –∞–¥—Ä–µ—Å–∞ –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    if update.message.contact:
        phone = update.message.contact.phone_number
        profile['phone'] = phone
        context.user_data['profile'] = profile
        set_user_profile(user.id, profile)

        if not profile.get('address'):
            await update.message.reply_text(
                "<b>–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–µ–Ω.</b> –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>—Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</b> —Ç–µ–∫—Å—Ç–æ–º (—É–ª–∏—Ü–∞, –¥–æ–º, –ø–æ–¥—ä–µ–∑–¥/—ç—Ç–∞–∂, –æ—Ä–∏–µ–Ω—Ç–∏—Ä).",
                parse_mode=ParseMode.HTML,
                reply_markup=get_address_keyboard(),
            )
            return ADDRESS
        # –µ—Å–ª–∏ –∞–¥—Ä–µ—Å —É–∂–µ –µ—Å—Ç—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        pend = context.user_data.get('pending_order') or {}
        day = pend.get('day', context.user_data.get('selected_day', '(–Ω–µ –≤—ã–±—Ä–∞–Ω)'))
        count = pend.get('count', context.user_data.get('selected_count', '(–Ω–µ –≤—ã–±—Ä–∞–Ω–æ)'))
        menu_for_day_text = pend.get('menu', context.user_data.get('menu_for_day', ''))
        addr = profile.get('address', '')
        phone_line = profile.get('phone') or "–≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"
        menu_lines_html = "\n".join(
            f" - {html.escape(it.strip())}" for it in str(menu_for_day_text).split(',') if it.strip()
        )
        confirm_text = (
            f"<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑</b>\n\n"
            f"<b>–î–µ–Ω—å:</b> {html.escape(day)}\n"
            f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {html.escape(str(count))}\n"
            f"<b>–ú–µ–Ω—é:</b>\n{menu_lines_html}\n\n"
            f"<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b>\n{html.escape(addr or '')}\n"
            f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {html.escape(phone_line)}\n\n"
            f"–í—Å–µ –≤–µ—Ä–Ω–æ?"
        )
        await update.message.reply_text(
            confirm_text,
            parse_mode=ParseMode.HTML,
            reply_markup=get_confirm_keyboard(),
        )
        return CONFIRM

    # –ï—Å–ª–∏ –ø—Ä–∏—à–µ–ª —Ç–µ–∫—Å—Ç - —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –∞–¥—Ä–µ—Å–æ–º
    if update.message.text and not update.message.contact:
        address_text = update.message.text.strip()
        if address_text:
            profile['address'] = address_text
            context.user_data['profile'] = profile
            set_user_profile(user.id, profile)
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –∞–¥—Ä–µ—Å–æ–º
            pend = context.user_data.get('pending_order') or {}
            day = pend.get('day', context.user_data.get('selected_day', '(–Ω–µ –≤—ã–±—Ä–∞–Ω)'))
            count = pend.get('count', context.user_data.get('selected_count', '(–Ω–µ –≤—ã–±—Ä–∞–Ω–æ)'))
            menu_for_day_text = pend.get('menu', context.user_data.get('menu_for_day', ''))
            addr = profile.get('address', '')
            phone_line = profile.get('phone') or "–≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"
            menu_lines_html = "\n".join(
                f" - {html.escape(it.strip())}" for it in str(menu_for_day_text).split(',') if it.strip()
            )
            confirm_text = (
                f"<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑</b>\n\n"
                f"<b>–î–µ–Ω—å:</b> {html.escape(day)}\n"
                f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {html.escape(str(count))}\n"
                f"<b>–ú–µ–Ω—é:</b>\n{menu_lines_html}\n\n"
                f"<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b>\n{html.escape(addr or '')}\n"
                f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {html.escape(phone_line)}\n\n"
                f"–í—Å–µ –≤–µ—Ä–Ω–æ?"
            )
            await update.message.reply_text(
                confirm_text,
                parse_mode=ParseMode.HTML,
                reply_markup=get_confirm_keyboard(),
            )
            return CONFIRM
        else:
            await update.message.reply_text(
                "–ê–¥—Ä–µ—Å –ø—É—Å—Ç–æ–π. <b>–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–º</b>.", parse_mode=ParseMode.HTML, reply_markup=get_address_keyboard()
            )
            return ADDRESS

    # –ï—Å–ª–∏ –ø–æ –∫–∞–∫–∏–º-—Ç–æ –ø—Ä–∏—á–∏–Ω–∞–º –∞–¥—Ä–µ—Å –≤—Å–µ –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å
    if not profile.get('address'):
        await update.message.reply_text(
            "–ù–∞–º –Ω—É–∂–µ–Ω —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å. <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–º</b>.", parse_mode=ParseMode.HTML, reply_markup=get_address_keyboard()
        )
        return ADDRESS
# –ö–æ–º–∞–Ω–¥–∞: –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –ø–æ ID (–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–¥–º–∏–Ω–∞)
async def order_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args if hasattr(context, "args") else []
    if not args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /order <ID>\n–ù–∞–ø—Ä–∏–º–µ—Ä: /order BLB-ABCDEFG-1234-1XYZ")
        return
    order_id = args[0].strip()
    data = get_order(order_id)
    if not data:
        await update.message.reply_text("–ó–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    user = update.effective_user
    is_admin = (user.id == ADMIN_ID)
    is_owner = (data.get("user_id") == user.id)
    if not (is_admin or is_owner):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É.")
        return

    created_at = data.get("created_at")
    created_line = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(created_at)) if created_at else "-"
    phone_line = data.get("phone") or "–Ω–µ —É–∫–∞–∑–∞–Ω"
    text = (
        f"ID –∑–∞–∫–∞–∑–∞: {order_id}\n"
        f"–°–æ–∑–¥–∞–Ω: {created_line}\n"
        f"–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {data.get('day')}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data.get('count')}\n"
        f"–ú–µ–Ω—é: {data.get('menu')}\n"
        f"–ê–¥—Ä–µ—Å: {data.get('address')}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone_line}"
    )
    await update.message.reply_text(text)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
async def fallback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = context.user_data.get('state', 'unknown')
    log_user_action(update.message.from_user, f"fallback state={state}")
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>–∫–Ω–æ–ø–∫–∏</b> –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.", parse_mode=ParseMode.HTML, reply_markup=get_main_menu_keyboard()
    )
    return MENU


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞: –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def my_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    prof = get_user_profile(uid)
    if not prof:
        await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –ø—Ä–∏ –∑–∞–∫–∞–∑–µ.")
        return
    pretty = json.dumps(prof, ensure_ascii=False, indent=2)
    await update.message.reply_text(f"<b>–í–∞—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å:</b>\n<pre>{html.escape(pretty)}</pre>", parse_mode=ParseMode.HTML)


# Handler for "–°–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º" button
async def contact_human(update: Update, context: ContextTypes.DEFAULT_TYPE):
    handle = (OPERATOR_HANDLE or "").lstrip("@")
    phone = OPERATOR_PHONE or ""
    parts = []
    if handle:
        parts.append(f"\nTelegram: <a href=\"https://t.me/{html.escape(handle)}\">@{html.escape(handle)}</a>")
    if phone:
        parts.append(f"\n–ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: <a href=\"tel:{html.escape(phone)}\">{html.escape(phone)}</a>")
    msg = "–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ " + "\n–∏–ª–∏ ".join(parts) if parts else "–ö–æ–Ω—Ç–∞–∫—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
    await update.message.reply_text(msg, parse_mode=ParseMode.HTML)
    return

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏–π –ª—é–±—ã—Ö –∫–Ω–æ–ø–æ–∫ (ReplyKeyboard)
BUTTON_TEXTS = [
    "–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é",
    "–ó–∞–∫–∞–∑–∞—Ç—å –æ–±–µ–¥",
    "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é",
    "–í—ã–±—Ä–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –¥–µ–Ω—å",
    "–í—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏",
    "–í—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å –∑–∞–Ω–æ–≤–æ",
    "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞",
    "1 –æ–±–µ–¥", "2 –æ–±–µ–¥–∞", "3 –æ–±–µ–¥–∞", "4 –æ–±–µ–¥–∞",
    "–î–∞",
    "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é",
    "–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å",
    "–ù–∞–∑–∞–¥",
    "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω",
    "üîÑ Restart bot",
    "‚ùó –°–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º",
    "Restart bot",
    "–°–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º",
]

BUTTONS_REGEX = r"^(" + "|".join(re.escape(s) for s in BUTTON_TEXTS) + r")$"

async def log_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and update.message.text:
        log_user_action(update.message.from_user, f"button_click: {update.message.text}")

#
# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logging.exception("Unhandled exception", exc_info=context.error)
    try:
        from telegram import Update
        if isinstance(update, Update) and update.effective_message:
            await update.effective_message.reply_text(
                "–£–ø—Å, –≤–æ–∑–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ.")
    except Exception:
        pass

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞

if __name__ == "__main__":
    persistence = PicklePersistence(filepath="bot_state.pickle")
    application = Application.builder().token(BOT_TOKEN).persistence(persistence).build()

    application.add_error_handler(error_handler)

    application.add_handler(CommandHandler("my_profile", my_profile))
    application.add_handler(CommandHandler("order", order_info))

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏–π –ª—é–±—ã—Ö –∫–Ω–æ–ø–æ–∫ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π handler, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É)
    application.add_handler(MessageHandler(filters.Regex(BUTTONS_REGEX), log_button), group=1)

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            MessageHandler(filters.Regex("^üîÑ Restart bot$"), start)
        ],
        states={
            MENU: [
                MessageHandler(filters.Regex("^–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é$"), show_menu),
                MessageHandler(filters.Regex("^–ó–∞–∫–∞–∑–∞—Ç—å –æ–±–µ–¥$"), order_lunch),
                MessageHandler(filters.Regex("^–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é$"), show_menu),
                MessageHandler(filters.Regex("^–í—ã–±—Ä–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –¥–µ–Ω—å$"), order_lunch),
                MessageHandler(filters.Regex("^üîÑ Restart bot$"), start),
                MessageHandler(filters.Regex("^Restart bot$"), start),
                MessageHandler(filters.Regex("^‚ùó –°–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º$"), contact_human),
                MessageHandler(filters.Regex("^–°–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º$"), contact_human),
            ],
            ORDER_DAY: [
                MessageHandler(filters.Regex("^(–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–í—Ç–æ—Ä–Ω–∏–∫|–°—Ä–µ–¥–∞|–ß–µ—Ç–≤–µ—Ä–≥|–ü—è—Ç–Ω–∏—Ü–∞)$"), select_day),
                MessageHandler(filters.Regex("^–î–∞$"), order_lunch),
                MessageHandler(filters.Regex("^–í—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏$"), order_lunch),
                MessageHandler(filters.Regex("^üîÑ Restart bot$"), start),
                MessageHandler(filters.Regex("^Restart bot$"), start),
                MessageHandler(filters.Regex("^‚ùó –°–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º$"), contact_human),
                MessageHandler(filters.Regex("^–°–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º$"), contact_human),
            ],
            ORDER_COUNT: [
                MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), back_to_day),
                MessageHandler(filters.Regex("^–í—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å –∑–∞–Ω–æ–≤–æ$"), order_lunch),
                MessageHandler(filters.Regex("^(1 –æ–±–µ–¥|2 –æ–±–µ–¥–∞|3 –æ–±–µ–¥–∞|4 –æ–±–µ–¥–∞)$"), select_count),
                MessageHandler(filters.Regex("^üîÑ Restart bot$"), start),
                MessageHandler(filters.Regex("^Restart bot$"), start),
                MessageHandler(filters.Regex("^‚ùó –°–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º$"), contact_human),
                MessageHandler(filters.Regex("^–°–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º$"), contact_human),
            ],
            ADDRESS: [
                MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), back_to_count),
                MessageHandler(filters.Regex("^‚ùó –°–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º$"), contact_human),
                MessageHandler(filters.Regex("^–°–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º$"), contact_human),
                MessageHandler((filters.TEXT | filters.CONTACT) & ~filters.COMMAND, address_phone),
                MessageHandler(filters.Regex("^üîÑ Restart bot$"), start),
                MessageHandler(filters.Regex("^Restart bot$"), start),
            ],
            CONFIRM: [
                MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), back_to_count),
                MessageHandler(filters.CONTACT, confirm_save_phone),
                MessageHandler(filters.Regex("^(–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é|–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å)$"), confirm_order),
                MessageHandler(filters.Regex("^üîÑ Restart bot$"), start),
                MessageHandler(filters.Regex("^Restart bot$"), start),
                MessageHandler(filters.Regex("^‚ùó –°–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º$"), contact_human),
                MessageHandler(filters.Regex("^–°–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º$"), contact_human),
                MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_order),
            ],
        },
        fallbacks=[CommandHandler("start", start), MessageHandler(filters.ALL, fallback)]
    )
    application.add_handler(conv_handler)
    log_console("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling(drop_pending_updates=True)
